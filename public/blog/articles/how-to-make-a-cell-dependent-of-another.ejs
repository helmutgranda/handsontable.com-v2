<section class="post" itemid="https://handsontable.com/<%= current.source %>" itemscope itemtype="http://schema.org/BlogPosting">
    <div class="row">
        <div class="large-6 large-centered columns">
            <h2 class="headline" itemprop="headline">
                How to Make a Cell Dependent of Another
            </h2>
            <div class="meta-details">
                <span>
                    <img src="../attachments/authors/krzysztof-budnik.png" alt="Krzysztof Budnik" />
                    <label>Krzysztof Budnik</label>
                </span>
                <span><a href="/blog/categories/recipes">Recipes</a> / April 15, 2016</span>
                <meta itemprop="datePublished" content="2016-04-15T12:00:00+01:00"/>
                <meta itemprop="dateModified" content="2016-04-15T12:00:00+01:00"/>
                <span><a href="#disqus_thread"></a></span>
            </div>
        </div>
    </div>
    <article class="row body">
        <div class="large-8 medium-12 large-centered columns">
            <p itemprop="image" itemscope itemtype="https://schema.org/ImageObject">
                <img src="../attachments/images/how-to-make-a-cell-dependent-of-another.png" alt="A Complete
                Guide to Changing Size of Handsontable" />
                <meta itemprop="url"
                      content="https://handsontable.com/blog/attachments/images/how-to-make-a-cell-dependent-of-another.png">
                <meta itemprop="width" content="757">
                <meta itemprop="height" content="441">
            </p>

            <p>
                Data entered in the spreadsheet often depends one on another.
                The user may want to choose a thing that was subordinate to previous choice.
                You could have asked yourself thousands of times in many cases how easy it is to create
                relationships between cells in Handsontable. We’ll do our best to explain it to you.
            </p>
            <h3>When cells depend on each other?</h3>
            <p>
                You can say so whenever value of one or more cells influences the value or attribute of other cell / cells.
            </p>
            <p>
                While using Handsontable you have multiple possibilities. You can decide between date, time,
                autocomplete and many more when choosing the type of a cell.  Despite that the process of creating
                dependencies is mainly pretty same to each of it. Assuming we have two cells depended one on another:
            </p>
            <ul>
                <li>
                    For cell 1 we listen for a change using hook called <code class="inline">afterChange</code>.
                </li>
                <li>
                    For cell 2, which depends on cell 1, we are applying a method called
                    <code class="inline">setDataAtCell</code>.
                    We do so whenever we wish to change its value. By using <code class="inline">setCellMeta</code> 
                    we change its meta data
                    (its appearance for instance).
                </li>
            </ul>
            <p>
                The possibility of connecting cells in an easy way and defining their mutual relationships is a
                thing that makes business world your oyster. Just use it! If own an online business you can decide
                which products are available in your store and which are not. Imagine, this is just a tip of an iceberg.
            </p>
            <h3>
                Checkbox-dependent cells
            </h3>
            <p>
                Let’s start our journey through cells dependencies from simple, very common example of using a checkbox.
                It accepts only two states and in our case below the checkbox is, by default, selected.
                Whenever it gets unselected, the background of its row changes color and all its fields become
                read-only. See how it works here:
            </p>
            <iframe width="100%" height="300" src="//jsfiddle.net/handsoncode/118d64jk/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
            <p>
                In the example above we added a class called <code class="inline">highlightCell</code> through
                <code class="inline">getCellMeta</code> method to change
                the background color of all cells in the row besides checkbox column. Whereas read-only value was granted by
                <code class="inline">getCellMeta</code> method.
            </p>
            <p>
                In another one we are going to change the value inside the cell. Selecting the checkbox erase cells
                content under columns <code class="inline">Year of production</code> and
                <code class="inline">Color</code> for this particular row. On how to do so see here:
            </p>
            <iframe width="100%" height="300" src="//jsfiddle.net/handsoncode/gy06k8k8/embedded/result,js,html/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
            <p>
                In the above example to erase cells values after calling a hook called
                <code class="inline">beforeChange</code> we use <code class="inline">setDataAtCell</code> method.
            </p>
            <p>
                <strong>Summary</strong>
            </p>
            <p>
                In presented cases we have learned how to handle checkbox states to change cells value or
                their attributes. We may often find ourselves in a situation when we need them both at the same
                time to achieve the intended business goal.
            </p>
            <h3>
                Select-dependent cells
            </h3>
            <p>
                When talking about data which are selected from a list of available options we mainly refer to
                the dropdown type of cell. In the case below by changing the year of cars production we determine
                the vehicle owner. See the example code here:
            </p>
            <iframe width="100%" height="300" src="//jsfiddle.net/handsoncode/5ppbuqzu/embedded/result,js,html/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
            <p>
                The above is possible thanks to listening to
                <code class="inline">beforeChange</code> and by
                implementation of setters such as <code class="inline">setDataAtRowProp</code>. Please keep in mind to use
                the <code class="inline">'source'='internal'</code> argument in order to avoid a loop in
                <code class="inline">beforeChange</code> callback.
            </p>
            <p>
                Next demonstration is an example on how to set a background of a distinctive color
                for the cars produced in 2016. To present such a
                concept we used dropdown type of cell.
            </p>
            <p>
                Choose a year 2016 in a dropdown cell to make the whole row green. Want to see how does it work? Jump in:
            </p>
            <iframe width="100%" height="300" src="//jsfiddle.net/handsoncode/fmzd3L4b/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
            <p>
                We used once more <code class="inline">setCellData</code> in order to add
                <code class="inline">highlightCell</code> class, which makes cells green.
            </p>
            <p>
                <strong>
                    Summary
                </strong>
            </p>
            <p>
                You can use the same exact methods  to change cells attributes.
                It doesn’t matter whether you pick up select, dropdown or autocomplete type.
            </p>
            <h3>
                Date-related dependencies
            </h3>
            <p>
                The case below shows us how to change the format of a time display. Either from 12-hour to
                24-hour or the other way round. See the example here:
            </p>
            <iframe width="100%" height="300" src="//jsfiddle.net/handsoncode/ywbh8a2t/embedded/result,js,html/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
            <p>
                We call a hook named <code class="inline">beforeRenderer</code> to transfer time format to a
                <code class="inline">getCellMeta</code> method,
                which is then used in a render of a time type column.
            </p>
            <p>
                <strong>Summary</strong>
            </p>
            <p>
                If you wish to change your clock from 12 to 24-hour one you just need a few lines of code.
                You are just one step away from making international clock displaying current time in all the
                countries in the world! Sounds exciting, isn’t it?
            </p>
            <h3>
                Content-related dependencies
            </h3>
            <p>
                This time lets imagine we belong to a world of quantum physics and we want to present the
                results of particle size measurements. According to how accurate your results ought to be you
                can set your own decimal place. In the example below when writing down a digit in the field
                <code class="inline">Fraction digits</code> we specify the accuracy of the result in field
                <code class="inline">Value</code>. See how we did that here:
            </p>
            <iframe width="100%" height="300" src="//jsfiddle.net/handsoncode/3ap3sdco/embedded/result,js,html/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
            <p>
                The above was possible thanks to custom function called <code class="inline">makeFormat</code>.
                It takes, as an argument,
                a value taken from <code class="inline">Fraction digits</code> column and precisely move the
                decimal place in the field <code class="inline">Value</code>.
            </p>
            <p>
                In case you want to change data in a dropdown type cell use the example below. Theoretically
                speaking, it is viable only through accessing instance settings. Thankfully we
                know how to obviate that rule.
            </p>
            <p>
                Enter the value in any cell of <code class="inline">Colors</code> column and watch how they appear in a
                dropdown list, beside other options, in that column. It’s pretty simple, go see it here:
            </p>
            <iframe width="100%" height="300" src="//jsfiddle.net/handsoncode/jzgkog9j/embedded/result,js,html/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
            <p>
                In the above example we enter the values as a text and treat the comma as a value separator. Next,
                taking the entered values as a data source, we are making a list of choice for a
                dropdown type cell. In practice we extend the renderer called <code class="inline">AutocompleteRenderer</code>
                by possibility of getting the list of entries to a dropdown type cell from its neighbour.
            </p>
            <p>
                <strong>Summary</strong>
            </p>
            <p>
                Text or numeric cell types don’t have to present only static values. They can be dependent one
                on from another, but also are able to affect the fields of a different type such as dropdown.
            </p>
            <h3>
                Conclusion
            </h3>
            <p>
                What distinguish a regular spreadsheet from your application is the power of customization.
                Only you decide how far you adjust Handsontable to the need of your users and business case.
                Examples that we delivered for sure will help you to take a look at your spreadsheet in a
                way you might never imagine.
            </p>

            <div class="addthis_native_toolbox toolbox"></div>
        </div>
    </article>

    <div itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
        <div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject">
            <meta itemprop="url" content="http://handsoncode.net/images/logos/logo.png">
            <meta itemprop="width" content="175">
            <meta itemprop="height" content="25">
        </div>
        <meta itemprop="name" content="Handsoncode">
    </div>

    <%- partial("../authors/_kbudnik") %>
</section>